Index: app/src/main/res/layout/fragment_map.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/map\"\r\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        tools:context=\".MainActivity\" />\r\n\r\n    <androidx.cardview.widget.CardView\r\n        android:id=\"@+id/card_view\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentTop=\"false\"\r\n        android:layout_alignParentBottom=\"true\"\r\n        android:layout_marginStart=\"20dp\"\r\n        android:layout_marginEnd=\"20dp\"\r\n        android:layout_marginBottom=\"30dp\"\r\n        app:cardBackgroundColor=\"#ffffff\"\r\n        app:cardCornerRadius=\"20dp\"\r\n        app:cardElevation=\"20dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:gravity=\"bottom\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/name\"\r\n                android:layout_width=\"208dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"25dp\"\r\n                android:layout_marginTop=\"16dp\"\r\n                android:layout_marginEnd=\"245dp\"\r\n                android:text=\"이름\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"20sp\"\r\n                android:textStyle=\"bold\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <TextView\r\n                    android:id=\"@+id/rating\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"19dp\"\r\n                    android:layout_marginStart=\"25dp\"\r\n                    android:layout_marginEnd=\"5dp\"\r\n                    android:text=\"평점\" />\r\n\r\n                <RatingBar\r\n                    android:id=\"@+id/ratingBar\"\r\n                    style=\"?android:attr/ratingBarStyleSmall\"\r\n                    android:layout_width=\"80dp\"\r\n                    android:layout_height=\"20dp\"\r\n                    android:layout_marginEnd=\"5dp\"\r\n                    android:isIndicator=\"true\"\r\n                    android:numStars=\"0\"\r\n                    android:progressTint=\"#ffd400\"\r\n                    android:rating=\"0\"\r\n                    android:stepSize=\"0.5\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/rating_total\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"20dp\"\r\n                    android:layout_marginEnd=\"0dp\"\r\n                    android:text=\"리뷰\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <TextView\r\n                android:id=\"@+id/address\"\r\n                android:layout_width=\"210dp\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"25dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:text=\"주소\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"16sp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/open_now\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"25dp\"\r\n                android:layout_marginTop=\"10dp\"\r\n                android:layout_marginBottom=\"20dp\"\r\n                android:text=\"영업\"\r\n                android:textColor=\"#22CC26\"\r\n                android:textSize=\"12sp\"\r\n                android:textStyle=\"bold\" />\r\n        </LinearLayout>\r\n\r\n    </androidx.cardview.widget.CardView>\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_map.xml b/app/src/main/res/layout/fragment_map.xml
--- a/app/src/main/res/layout/fragment_map.xml	(revision d06bd96632b95a3dc980e2bb4794bc38e2bce96b)
+++ b/app/src/main/res/layout/fragment_map.xml	(date 1669797437655)
@@ -34,6 +34,14 @@
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent">
 
+        <ImageView
+            android:id="@+id/imageView4"
+            android:layout_width="120dp"
+            android:layout_height="120dp"
+            android:layout_marginStart="240dp"
+            app:srcCompat="@drawable/background_profile"
+            tools:layout_marginTop="100dp" />
+
         <LinearLayout
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
@@ -53,7 +61,7 @@
                 android:textStyle="bold" />
 
             <LinearLayout
-                android:layout_width="match_parent"
+                android:layout_width="262dp"
                 android:layout_height="wrap_content"
                 android:layout_marginTop="10dp"
                 android:orientation="horizontal">
Index: app/src/main/java/com/example/kotlinproject/MapFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinproject\r\n\r\n\r\nimport android.Manifest.permission.ACCESS_FINE_LOCATION\r\nimport android.annotation.SuppressLint\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.content.IntentSender\r\nimport android.content.pm.PackageManager\r\nimport android.location.Location\r\nimport android.net.Uri\r\nimport androidx.fragment.app.Fragment\r\n\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\nimport android.provider.Settings\r\n\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.activity.result.launch\r\nimport androidx.activity.result.registerForActivityResult\r\n\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.fragment.app.setFragmentResultListener\r\nimport com.bumptech.glide.Glide\r\nimport com.example.kotlinproject.databinding.FragmentMapBinding\r\nimport com.example.kotlinproject.restaurant.RestaurantData\r\nimport com.google.android.gms.common.api.ApiException\r\nimport com.google.android.gms.common.api.ResolvableApiException\r\nimport com.google.android.gms.location.*\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.CameraPosition\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.libraries.places.api.Places\r\nimport com.google.android.libraries.places.api.model.Place\r\nimport com.google.android.libraries.places.api.net.FetchPhotoRequest\r\nimport com.google.android.libraries.places.api.net.FetchPhotoResponse\r\nimport com.google.android.libraries.places.api.net.FetchPlaceRequest\r\nimport com.google.android.libraries.places.api.net.FetchPlaceResponse\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport java.net.URI\r\nimport kotlin.math.log\r\n\r\nclass MapFragment : Fragment(), GoogleMap.OnMarkerClickListener, GoogleMap.OnMapClickListener {\r\n\r\n\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var locationRequest: LocationRequest\r\n    private lateinit var locationCallback: LocationCallback\r\n    private lateinit var currentLatLng: LatLng\r\n    private var binding: FragmentMapBinding? = null\r\n    private val permissions = Array(2){\r\n        android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n        ACCESS_FINE_LOCATION\r\n    }\r\n\r\n    private val callback = OnMapReadyCallback { googleMap ->\r\n        mMap = googleMap\r\n        showDefaultLocation()\r\n        setLocationRequestSettings()\r\n        locationUpdate()\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentMapBinding.inflate(inflater)\r\n        return binding?.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        // Define a Place ID.\r\n\r\n        binding?.cardView?.visibility =View.GONE\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n        if(isPermitted()) startProcess()\r\n        else getPermission()\r\n    }\r\n\r\n    private fun isPermitted() : Boolean {\r\n        for (perm in permissions) {\r\n            if (ActivityCompat.checkSelfPermission(requireActivity(), perm) != PackageManager.PERMISSION_GRANTED)\r\n                return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    private fun startProcess(){\r\n        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(callback)\r\n    }\r\n\r\n    private fun getPermission(){\r\n//        val contract = ActivityResultContracts.RequestPermission()\r\n//        val activityResultLauncher = registerForActivityResult(contract){\r\n//            isGranted ->\r\n//            if\r\n//        }\r\n        //deprecated code, register..로 추후 변경\r\n//        requestPermissions(permissions,0)\r\n        val requestLocation = registerForActivityResult(ActivityResultContracts.RequestPermission(),\r\n        ACCESS_FINE_LOCATION){ isGranted ->\r\n            if(isGranted) {\r\n                startProcess()\r\n            }\r\n            else if (\r\n                ActivityCompat.shouldShowRequestPermissionRationale(\r\n                    requireActivity(),\r\n                    ACCESS_FINE_LOCATION\r\n                )\r\n            ) {\r\n                Toast.makeText(requireActivity(), \"주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.\", Toast.LENGTH_SHORT).show()\r\n            }\r\n            //요청을 2회 이상 거절하면\r\n            else noticeCantWork()\r\n        }\r\n        requestLocation.launch()\r\n    }\r\n\r\n\r\n//    override fun onRequestPermissionsResult(\r\n//        requestCode: Int,\r\n//        permissions: Array<out String>,\r\n//        grantResults: IntArray\r\n//    ) {\r\n//        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n//        when (requestCode) {//requestCode가 0일때\r\n//            0 -> {\r\n//                if (grantResults.isNotEmpty()) {//요청을 허락했을 때 정보를 갖는다\r\n//                    var allGranted = true\r\n//                    //요청한 권한 허용/거부 상태를 한번에 체크한다\r\n//                    for (grant in grantResults) {\r\n//                        if (grant != PackageManager.PERMISSION_GRANTED) {\r\n//                            allGranted = false\r\n//                            break\r\n//                        }\r\n//                    }\r\n//                    //요청한 권한을 모두 허용했다면\r\n//                    if (allGranted) {\r\n//                        Log.d(TAG,\"start실행\")\r\n//                        startProcess()\r\n//                    }\r\n//                    //요청을 1회 거절하면\r\n//                    else if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n//                            requireActivity(),\r\n//                            android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n//                        ) &&\r\n//                        ActivityCompat.shouldShowRequestPermissionRationale(\r\n//                            requireActivity(),\r\n//                            android.Manifest.permission.ACCESS_FINE_LOCATION\r\n//                        )\r\n//                    ) {\r\n//                        Toast.makeText(requireActivity(), \"주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.\", Toast.LENGTH_SHORT).show()\r\n//                        getPermission()\r\n//                    }\r\n//                    //요청을 2회 이상 거절하면\r\n//                    else noticeCantWork()\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n\r\n    private fun noticeCantWork(){\r\n        Toast.makeText(requireActivity(), \"설정에서 위치 사용 권한을 허용해 주세요\", Toast.LENGTH_SHORT).show()\r\n        val snackBar = binding?.root?.let {\r\n            Snackbar.make(it,\"음식점 검색을 위한 위치 정보 접근 권한이 필요합니다\",\r\n                Snackbar.LENGTH_INDEFINITE\r\n            )\r\n        }\r\n        snackBar?.setAction(\"승인\") {gotoSettings()}\r\n        snackBar?.show()\r\n    }\r\n\r\n    fun gotoSettings(){\r\n        val intent = Intent()\r\n        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n        val uri = Uri.fromParts(\"package\", activity?.packageName, null)\r\n        intent.data = uri\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun showDefaultLocation(){\r\n        val markerOptions = MarkerOptions()\r\n        markerOptions.position(LatLng(37.56,126.97))\r\n        markerOptions.title(\"위치정보 가져올 수 없음\")\r\n        markerOptions.snippet(\"위치 권한과 GPS 활성 여부를 확인하세요\")\r\n        mMap.addMarker(markerOptions)\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(37.56,126.97),15.0f))\r\n    }\r\n\r\n\r\n    private fun setLocationRequestSettings() {\r\n        locationRequest = LocationRequest.create().apply {\r\n            interval = 10000\r\n            fastestInterval = 5000\r\n            priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        }\r\n\r\n        val builder = LocationSettingsRequest.Builder()\r\n            .addLocationRequest(locationRequest)\r\n        val client: SettingsClient = LocationServices.getSettingsClient(requireActivity())\r\n        val task: Task<LocationSettingsResponse> = client.checkLocationSettings(builder.build())\r\n        //GPS가 켜져있는 경우 아무 것도 안함\r\n        task.addOnFailureListener { exception ->\r\n            // GPS가 꺼져있을 경우\r\n            if (exception is ResolvableApiException) {\r\n                try {\r\n                    exception.startResolutionForResult(\r\n                        requireActivity(),\r\n                        0\r\n                    )\r\n                } catch (sendEx: IntentSender.SendIntentException) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun locationUpdate(){\r\n        locationCallback = object : LocationCallback(){\r\n            override fun onLocationResult(locationResult: LocationResult) {\r\n                locationResult.run{\r\n                    currentLatLng=LatLng(this.locations[0].latitude,this.locations[0].longitude)\r\n                    showCurrentLocation(this.locations[0])\r\n                    getRestaurant(this.locations[0])\r\n                }\r\n            }\r\n        }\r\n        @SuppressLint(\"MissingPermission\")\r\n        if(isPermitted()) {\r\n            fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, Looper.myLooper())\r\n        }\r\n    }\r\n\r\n    private fun showCurrentLocation(location: Location){\r\n        val currentLocation = LatLng(location.latitude, location.longitude)\r\n        val markerOption = MarkerOptions().position(currentLocation).title(\"현재 위치입니다\")\r\n        val cameraOption= CameraPosition.Builder().target(currentLocation).zoom(15.0f).build()\r\n        val camera = CameraUpdateFactory.newCameraPosition(cameraOption)\r\n        mMap.clear()\r\n        mMap.addMarker(markerOption)\r\n        mMap.moveCamera(camera)\r\n    }\r\n\r\n    private fun getRestaurant(location: Location) {\r\n        var keyword:String? = null\r\n//        setFragmentResultListener(\"Food\"){ key, bundle ->\r\n//            keyword=bundle.getString(key)\r\n//        }\r\n        keyword = arguments?.getString(\"Food\")\r\n        Log.d(TAG,\"$keyword 성공\")\r\n        RetrofitObject.getApiService().getRestaurant(getURL(location, keyword))\r\n            .enqueue(object : Callback<RestaurantData> {\r\n                override fun onResponse(\r\n                    call: Call<RestaurantData>,\r\n                    response: Response<RestaurantData>\r\n                ) {\r\n                    showRestaurant(response.body() as RestaurantData)\r\n                }\r\n\r\n                override fun onFailure(call: Call<RestaurantData>, t: Throwable) {\r\n                    Toast.makeText(requireActivity(), \"api request 실패.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun showRestaurant(data: RestaurantData) {\r\n        Log.d(TAG,\"결과 ${data.results.size}개 성공\")\r\n        for (res in data.results){\r\n            val position = LatLng(res.geometry.location.lat, res.geometry.location.lng)\r\n            val markerOptions = MarkerOptions().position(position)\r\n            val marker = mMap.addMarker(markerOptions)\r\n            val openNow = if(res.opening_hours==null) null else res.opening_hours.open_now\r\n            marker?.tag = \"${res.name}/${res.rating}/${res.user_ratings_total}/${res.formatted_address}/${openNow}\"\r\n        }\r\n        mMap.setOnMarkerClickListener(this)\r\n        mMap.setOnMapClickListener(this)\r\n        fusedLocationClient.removeLocationUpdates(locationCallback)\r\n    }\r\n\r\n    override fun onMarkerClick(marker: Marker): Boolean {\r\n        if(marker.position == currentLatLng){\r\n            marker.title=\"현재 위치\"\r\n            marker.snippet=\"현재 계신 위치 입니다\"\r\n            marker.showInfoWindow()\r\n            return true\r\n        }\r\n        binding?.cardView?.visibility = View.VISIBLE\r\n        val arr = marker.tag.toString().split(\"/\")\r\n        binding?.name?.text = arr[0]\r\n        binding?.rating?.text=arr[1]\r\n        binding?.ratingBar?.rating = arr[1].toFloat()\r\n        val review = arr[2]+\"개의 리뷰\"\r\n        binding?.ratingTotal?.text=review\r\n        binding?.address?.text =arr[3]\r\n        binding?.openNow?.text = when(arr[4]) {\r\n            \"true\" -> \"현재 영업 중\"\r\n            \"false\" ->\"영업 중이지 않음\"\r\n            else -> \"영업 중인지 알 수 없음\"\r\n        }\r\n    return true\r\n    }\r\n\r\n    override fun onMapClick(latLng: LatLng) {\r\n        binding?.cardView?.visibility=View.GONE\r\n    }\r\n\r\n    //동적 URL 생성\r\n    private fun getURL(location: Location, keyword: String?): String {\r\n        val url = \"maps/api/place/textsearch/json?query=${keyword}\" +\r\n                \"&location=${location.latitude},${location.longitude}\" +\r\n                \"&radius=5000&key=${API_KEY}&type=restaurant&language=ko\"\r\n        return url\r\n    }\r\n    private fun getURL(photoReference: String): String{\r\n        val url = \"${BASE_URL}maps/api/place/photo?maxwidth=200&\" +\r\n                \"potho_reference=$photoReference&key=${API_KEY}\"\r\n    return url\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding=null\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinproject/MapFragment.kt b/app/src/main/java/com/example/kotlinproject/MapFragment.kt
--- a/app/src/main/java/com/example/kotlinproject/MapFragment.kt	(revision d06bd96632b95a3dc980e2bb4794bc38e2bce96b)
+++ b/app/src/main/java/com/example/kotlinproject/MapFragment.kt	(date 1669798005675)
@@ -69,6 +69,9 @@
         android.Manifest.permission.ACCESS_COARSE_LOCATION
         ACCESS_FINE_LOCATION
     }
+    val LINK="https://maps.googleapis.com/maps/api/place/photo"+
+    "?maxwidth=200&photo_reference=AW30NDzirzB8gSQcN8C-XGJPPf3pEjPa025o04sLdB8Se-6BtyM6qiGtsOivqnGFZQWCQTezvPFAVkBl36noq8tX5wZBZY2SM2Zxh4o1c1iI4WS-90vyaYUgTH450lq9C8inruL00zSiiVW9Lc_AbuXn1PDmbY45Qzs_U84N5CZ-CBcLE5b4"+
+    "&key=AIzaSyDNfNqFjQEOWNmDG4j7xJfTuU99-zcgc4s"
 
     private val callback = OnMapReadyCallback { googleMap ->
         mMap = googleMap
@@ -289,7 +292,8 @@
             val markerOptions = MarkerOptions().position(position)
             val marker = mMap.addMarker(markerOptions)
             val openNow = if(res.opening_hours==null) null else res.opening_hours.open_now
-            marker?.tag = "${res.name}/${res.rating}/${res.user_ratings_total}/${res.formatted_address}/${openNow}"
+            val photoReference = if(res.photos.isNullOrEmpty()) null else res.photos[0].photo_reference
+            marker?.tag = "${res.name}/${res.rating}/${res.user_ratings_total}/${res.formatted_address}/${openNow}/${photoReference}"
         }
         mMap.setOnMarkerClickListener(this)
         mMap.setOnMapClickListener(this)
@@ -303,6 +307,7 @@
             marker.showInfoWindow()
             return true
         }
+        //Glide.with(this).load(LINK).into(binding!!.imageView4)
         binding?.cardView?.visibility = View.VISIBLE
         val arr = marker.tag.toString().split("/")
         binding?.name?.text = arr[0]
@@ -316,6 +321,9 @@
             "false" ->"영업 중이지 않음"
             else -> "영업 중인지 알 수 없음"
         }
+        Log.d(TAG, "${arr[5]} 성공")
+        Glide.with(this).load(getURL(arr[5])).into(binding!!.imageView4)
+
     return true
     }
 
@@ -332,7 +340,7 @@
     }
     private fun getURL(photoReference: String): String{
         val url = "${BASE_URL}maps/api/place/photo?maxwidth=200&" +
-                "potho_reference=$photoReference&key=${API_KEY}"
+                "photo_reference=$photoReference&key=${API_KEY}"
     return url
     }
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25_오전_11_26_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25_오전_11_26_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25_오전_11_26_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25_오전_11_26_[Changes]1/shelved.patch	(revision d06bd96632b95a3dc980e2bb4794bc38e2bce96b)
+++ /dev/null	(revision d06bd96632b95a3dc980e2bb4794bc38e2bce96b)
@@ -1,159 +0,0 @@
-Index: app/src/main/java/com/example/kotlinproject/ResultFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kotlinproject\r\n\r\nimport android.content.ActivityNotFoundException\r\nimport android.content.ContentValues\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.annotation.DrawableRes\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.example.kotlinproject.databinding.FragmentResultBinding\r\nimport com.example.kotlinproject.db.AppDatabase\r\nimport com.example.kotlinproject.db.RandomFood.Companion.ANYTHINGFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.ASIANFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.CHINESEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.JAPANESEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.KOREANFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.MEATFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.NOODLEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.RICEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.WESTERNFOOD\r\nimport com.example.kotlinproject.db.entity.Foods\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.kakao.sdk.common.KakaoSdk\r\nimport com.kakao.sdk.common.util.KakaoCustomTabsClient\r\nimport com.kakao.sdk.share.ShareClient\r\nimport com.kakao.sdk.share.WebSharerClient\r\nimport com.kakao.sdk.template.model.*\r\nimport java.time.LocalDate\r\nimport java.util.*\r\n\r\nclass ResultFragment : Fragment() {\r\n    val database: FirebaseDatabase = FirebaseDatabase.getInstance()\r\n    val databaseReference : DatabaseReference = database.getReference()\r\n    var db: AppDatabase? = null\r\n\r\n    var flag = 0\r\n    var binding : FragmentResultBinding? = null\r\n\r\n    var imageStatus = -1\r\n    lateinit var selectedFood : String\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n//        arguments?.let {\r\n//            anything = it.getStringArrayList(\"anything\")\r\n//        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentResultBinding.inflate(inflater)\r\n        // Inflate the layout for this fragment\r\n        return binding?.root\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        if(flag == 0){\r\n            setImage()\r\n        }else {\r\n            setCurrentImage()\r\n        }\r\n        flag++\r\n\r\n\r\n        binding?.btnMap?.setOnClickListener {\r\n\r\n            // 1.firebase 에 저장\r\n            var random_uuid = UUID.randomUUID()\r\n            val today: LocalDate = LocalDate.now()\r\n            val food = Foods(random_uuid.toString(), selectedFood, today.toString())\r\n            databaseReference.child(\"Foods\").push().setValue(food)\r\n\r\n            val bundle = Bundle()\r\n            bundle.putString(\"Food\", selectedFood)\r\n\r\n            // 2.내부 DB에 저장\r\n            db = AppDatabase.getInstance(requireContext())\r\n            db?.FoodsDao()?.insertAll(food)\r\n            findNavController().navigate(R.id.action_resultFragment_to_mapFragment, bundle)\r\n        }\r\n\r\n        //TODO 도혁님 redo 작업 부탁드려요\r\n        binding?.btnRedo?.setOnClickListener {\r\n            setImage()\r\n        }\r\n\r\n        binding?.btnShare?.setOnClickListener {\r\n            KakaoSdk.init(requireContext(), \"a3371d68064ad62c0ef12f967df3741c\")\r\n            val defaultFeed = makeKakaoTemplate()\r\n            //카카오톡 설치 여부 확인\r\n            startKakaoLink(defaultFeed)\r\n        }\r\n    }\r\n\r\n    private fun setCurrentImage() {\r\n        binding?.imgResult?.setImageResource(imageStatus)\r\n    }\r\n\r\n    private fun setImage() {\r\n        val anything = arguments?.getStringArrayList(ANYTHINGFOOD)\r\n        val korean = arguments?.getStringArrayList(KOREANFOOD)\r\n        val chinese = arguments?.getStringArrayList(CHINESEFOOD)\r\n        val western = arguments?.getStringArrayList(WESTERNFOOD)\r\n        val asian = arguments?.getStringArrayList(ASIANFOOD)\r\n        val japanese = arguments?.getStringArrayList(JAPANESEFOOD)\r\n        val noodle = arguments?.getStringArrayList(NOODLEFOOD)\r\n        val meat = arguments?.getStringArrayList(MEATFOOD)\r\n        val rice = arguments?.getStringArrayList(RICEFOOD)\r\n\r\n        if (anything != null) {\r\n            val index = (1..anything?.size!!).random()\r\n            selectedFood = anything[index - 1]\r\n\r\n            val randomResource = when (index) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_buchim_gae\r\n                3 -> R.drawable.select_cheong_guk_jang\r\n                4 -> R.drawable.select_chicken\r\n                5 -> R.drawable.select_dak_bal\r\n                6 -> R.drawable.select_ddek_bokki\r\n                7 -> R.drawable.select_do_si_rak\r\n                8 -> R.drawable.select_doen_jang_jjigae\r\n                9 -> R.drawable.select_don_gas\r\n                10 -> R.drawable.select_galbitang\r\n\r\n                11 -> R.drawable.select_gim_bap\r\n                12 -> R.drawable.select_gob_chang\r\n                13 -> R.drawable.select_gug_bab\r\n                14 -> R.drawable.select_haejang_gug\r\n                15 -> R.drawable.select_hamburger\r\n                16 -> R.drawable.select_hotdog\r\n                17 -> R.drawable.select_jajjang\r\n                18 -> R.drawable.select_jjambong\r\n                19 -> R.drawable.select_jukkumi\r\n\r\n                20 -> R.drawable.select_kalgugsu\r\n                21 -> R.drawable.select_man_do\r\n                22 -> R.drawable.select_mara_tang\r\n                23 -> R.drawable.select_omurice\r\n                24 -> R.drawable.select_pasta\r\n                25 -> R.drawable.select_pizza\r\n                26 -> R.drawable.select_ramen\r\n                27 -> R.drawable.select_sam_gye_tang\r\n                28 -> R.drawable.select_sam_gyeob_sal\r\n                29 -> R.drawable.select_sandwich\r\n\r\n                30 -> R.drawable.select_sashimi\r\n                31 -> R.drawable.select_soyed_crab\r\n                32 -> R.drawable.select_ssal_guksu\r\n\r\n                33 -> R.drawable.select_sundaebokk_eum\r\n                34 -> R.drawable.select_yang_kko_chi\r\n                35 -> R.drawable.select_yug_hoe\r\n                else -> R.drawable.select_jeyugbokk_eum\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (korean != null) {\r\n            val randomNumber = (1..korean.size).random()\r\n            selectedFood = korean[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_buchim_gae\r\n                3 -> R.drawable.select_cheong_guk_jang\r\n                4 -> R.drawable.select_dak_bal\r\n                5 -> R.drawable.select_ddek_bokki\r\n                6 -> R.drawable.select_do_si_rak\r\n                7 -> R.drawable.select_doen_jang_jjigae\r\n                8 -> R.drawable.select_galbitang\r\n                9 -> R.drawable.select_gim_bap\r\n                10 -> R.drawable.select_gob_chang\r\n\r\n                11 -> R.drawable.select_gug_bab\r\n                12 -> R.drawable.select_haejang_gug\r\n                13 -> R.drawable.select_jeyugbokk_eum\r\n                14 -> R.drawable.select_jukkumi\r\n                15 -> R.drawable.select_kalgugsu\r\n                16 -> R.drawable.select_sam_gye_tang\r\n                17 -> R.drawable.select_galbitang\r\n                18 -> R.drawable.select_sam_gyeob_sal\r\n                else -> R.drawable.select_sundaebokk_eum\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (chinese != null) {\r\n            val randomNumber = (1..chinese.size).random()\r\n            selectedFood = chinese[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_jajjang\r\n                2 -> R.drawable.select_jjambong\r\n                3 -> R.drawable.select_man_do\r\n                4 -> R.drawable.select_mara_tang\r\n                else -> R.drawable.select_yang_kko_chi\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (western != null) {\r\n            val randomNumber = (1..western.size).random()\r\n            selectedFood = western[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_don_gas\r\n                2 -> R.drawable.select_hamburger\r\n                3 -> R.drawable.select_hotdog\r\n                4 -> R.drawable.select_omurice\r\n                5 -> R.drawable.select_pasta\r\n                6 -> R.drawable.select_pizza\r\n                else -> R.drawable.select_sandwich\r\n\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (asian != null) {\r\n            val randomNumber = (1..asian.size).random()\r\n            selectedFood = asian[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_buchim_gae\r\n                3 -> R.drawable.select_chicken\r\n                4 -> R.drawable.select_dak_bal\r\n                5 -> R.drawable.select_do_si_rak\r\n                6 -> R.drawable.select_gim_bap\r\n                7 -> R.drawable.select_gob_chang\r\n                8 -> R.drawable.select_jajjang\r\n                9 -> R.drawable.select_jukkumi\r\n                10 -> R.drawable.select_kalgugsu\r\n\r\n                11 -> R.drawable.select_man_do\r\n                12 -> R.drawable.select_mara_tang\r\n                13 -> R.drawable.select_ramen\r\n                14 -> R.drawable.select_sam_gyeob_sal\r\n                15 -> R.drawable.select_soyed_crab\r\n                16 -> R.drawable.select_ssal_guksu\r\n                17 -> R.drawable.select_jjambong\r\n                else -> R.drawable.select_yang_kko_chi\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (japanese != null) {\r\n            val randomNumber = (1..japanese.size).random()\r\n            selectedFood = japanese[randomNumber - 1]\r\n\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_don_gas\r\n                2 -> R.drawable.select_ramen\r\n                3 -> R.drawable.select_sashimi\r\n                else -> R.drawable.select_soyed_crab\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (noodle != null) {\r\n            val randomNumber = (1..noodle.size).random()\r\n            selectedFood = noodle[randomNumber - 1]\r\n\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_jajjang\r\n                2 -> R.drawable.select_jjambong\r\n                3 -> R.drawable.select_kalgugsu\r\n                4 -> R.drawable.select_mara_tang\r\n                5 -> R.drawable.select_pasta\r\n                6 -> R.drawable.select_ramen\r\n                else -> R.drawable.select_ssal_guksu\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (meat != null) {\r\n            val randomNumber = (1..meat.size).random()\r\n            selectedFood = meat[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_chicken\r\n                2 -> R.drawable.select_dak_bal\r\n                3 -> R.drawable.select_jeyugbokk_eum\r\n                4 -> R.drawable.select_sam_gyeob_sal\r\n                5 -> R.drawable.select_yang_kko_chi\r\n                else -> R.drawable.select_yug_hoe\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (rice != null) {\r\n            val randomNumber = (1..rice.size).random()\r\n            selectedFood = rice[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_cheong_guk_jang\r\n                3 -> R.drawable.select_do_si_rak\r\n                4 -> R.drawable.select_galbitang\r\n                5 -> R.drawable.select_gim_bap\r\n                6 -> R.drawable.select_haejang_gug\r\n                7 -> R.drawable.select_gug_bab\r\n                8 -> R.drawable.select_omurice\r\n                else -> R.drawable.select_sam_gye_tang\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n    }\r\n    private fun makeKakaoTemplate(): FeedTemplate {\r\n        val defaultFeed = FeedTemplate(\r\n            content = Content(\r\n                title = \"랜덤 음식\",\r\n                description = \"비빔밥\",\r\n                imageUrl = \"https://user-images.githubusercontent.com/88755733/203039310-716be5d5-8770-419d-890b-f32b4a925bd4.png\",\r\n                link = Link(\r\n\r\n                )\r\n            )\r\n        )\r\n        return defaultFeed\r\n    }\r\n\r\n    private fun startKakaoLink(defaultFeed: FeedTemplate) {\r\n        if (ShareClient.instance.isKakaoTalkSharingAvailable(requireContext())) {\r\n            // 카카오톡으로 카카오톡 공유 가능\r\n            ShareClient.instance.shareDefault(requireContext(), defaultFeed) { sharingResult, error ->\r\n                if (error != null) {\r\n                    Log.e(ContentValues.TAG, \"카카오톡 공유 실패\", error)\r\n                } else if (sharingResult != null) {\r\n                    Log.d(ContentValues.TAG, \"카카오톡 공유 성공 ${sharingResult.intent}\")\r\n                    startActivity(sharingResult.intent)\r\n\r\n                    // 카카오톡 공유에 성공했지만 아래 경고 메시지가 존재할 경우 일부 컨텐츠가 정상 동작하지 않을 수 있습니다.\r\n                    Log.w(ContentValues.TAG, \"Warning Msg: ${sharingResult.warningMsg}\")\r\n                    Log.w(ContentValues.TAG, \"Argument Msg: ${sharingResult.argumentMsg}\")\r\n                }\r\n            }\r\n        } else {\r\n            // 카카오톡 미설치: 웹 공유 사용 권장\r\n            // 웹 공유 예시 코드\r\n            val sharerUrl = WebSharerClient.instance.makeDefaultUrl(defaultFeed)\r\n\r\n            // CustomTabs으로 웹 브라우저 열기\r\n\r\n            // 1. CustomTabsServiceConnection 지원 브라우저 열기\r\n            // ex) Chrome, 삼성 인터넷, FireFox, 웨일 등\r\n            try {\r\n                KakaoCustomTabsClient.openWithDefault(requireContext(), sharerUrl)\r\n            } catch (e: UnsupportedOperationException) {\r\n                // CustomTabsServiceConnection 지원 브라우저가 없을 때 예외처리\r\n            }\r\n\r\n            // 2. CustomTabsServiceConnection 미지원 브라우저 열기\r\n            // ex) 다음, 네이버 등\r\n            try {\r\n                KakaoCustomTabsClient.open(requireContext(), sharerUrl)\r\n            } catch (e: ActivityNotFoundException) {\r\n                // 디바이스에 설치된 인터넷 브라우저가 없을 때 예외처리\r\n            }\r\n        }\r\n    }\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kotlinproject/ResultFragment.kt b/app/src/main/java/com/example/kotlinproject/ResultFragment.kt
---- a/app/src/main/java/com/example/kotlinproject/ResultFragment.kt	
-+++ b/app/src/main/java/com/example/kotlinproject/ResultFragment.kt	
-@@ -10,6 +10,7 @@
- import android.view.ViewGroup
- import android.widget.ImageView
- import androidx.annotation.DrawableRes
-+import androidx.fragment.app.setFragmentResult
- import androidx.navigation.fragment.findNavController
- import com.example.kotlinproject.databinding.FragmentResultBinding
- import com.example.kotlinproject.db.AppDatabase
-@@ -82,7 +83,7 @@
- 
-             val bundle = Bundle()
-             bundle.putString("Food", selectedFood)
--
-+            setFragmentResult("Food",bundle)
-             // 2.내부 DB에 저장
-             db = AppDatabase.getInstance(requireContext())
-             db?.FoodsDao()?.insertAll(food)
-Index: app/src/main/java/com/example/kotlinproject/MapFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.kotlinproject\r\n\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.ContentValues.TAG\r\nimport android.content.IntentSender\r\nimport android.content.pm.PackageManager\r\nimport android.location.Location\r\nimport androidx.fragment.app.Fragment\r\n\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\n\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\n\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.fragment.app.setFragmentResultListener\r\nimport com.example.kotlinproject.databinding.FragmentMapBinding\r\nimport com.example.kotlinproject.restaurant.RestaurantData\r\nimport com.google.android.gms.common.api.ResolvableApiException\r\nimport com.google.android.gms.location.*\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.CameraPosition\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass MapFragment : Fragment() {\r\n\r\n    private val callback = OnMapReadyCallback { googleMap ->\r\n        mMap = googleMap\r\n        showDefaultLocation()\r\n        setLocationRequestSettings()\r\n        locationUpdate()\r\n    }\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var locationRequest: LocationRequest\r\n    private lateinit var locationCallback: LocationCallback\r\n    var binding: FragmentMapBinding? = null\r\n    val permissions = Array(2){\r\n        android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n        android.Manifest.permission.ACCESS_FINE_LOCATION\r\n    }\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentMapBinding.inflate(inflater)\r\n        return binding?.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n        if(isPermitted()) startProcess()\r\n        else getPermission()\r\n    }\r\n\r\n    private fun isPermitted() : Boolean {\r\n        for (perm in permissions) {\r\n            if (ActivityCompat.checkSelfPermission(requireActivity(), perm) != PackageManager.PERMISSION_GRANTED)\r\n                return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    private fun startProcess(){\r\n        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(callback)\r\n    }\r\n\r\n    private fun getPermission(){\r\n//        val contract = ActivityResultContracts.RequestPermission()\r\n//        val activityResultLauncher = registerForActivityResult(contract){\r\n//            isGranted ->\r\n//            if\r\n//        }\r\n        //deprecated code, register..로 추후 변경\r\n        requestPermissions(permissions,0)\r\n    }\r\n\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        when (requestCode) {//requestCode가 0일때\r\n            0 -> {\r\n                if (grantResults.isNotEmpty()) {//요청을 허락했을 때 정보를 갖는다\r\n                    var allGranted = true\r\n                    //요청한 권한 허용/거부 상태를 한번에 체크한다\r\n                    for (grant in grantResults) {\r\n                        if (grant != PackageManager.PERMISSION_GRANTED) {\r\n                            allGranted = false\r\n                            break\r\n                        }\r\n                    }\r\n                    //요청한 권한을 모두 허용했다면\r\n                    if (allGranted) {\r\n                        Log.d(TAG,\"start실행\")\r\n                        startProcess()\r\n                    }\r\n                    //요청을 1회 거절하면\r\n                    else if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                            requireActivity(),\r\n                            android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n                        ) &&\r\n                        ActivityCompat.shouldShowRequestPermissionRationale(\r\n                            requireActivity(),\r\n                            android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                        )\r\n                    ) {\r\n                        Toast.makeText(requireActivity(), \"주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.\", Toast.LENGTH_SHORT).show()\r\n                        getPermission()\r\n                    }\r\n                    //요청을 2회 이상 거절하면\r\n                    else noticeCantWork()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun noticeCantWork(){\r\n        Toast.makeText(requireActivity(), \"설정에서 위치 사용 권한을 허용해 주세요\", Toast.LENGTH_SHORT).show()\r\n//        val snackBar = Snackbar.make(\r\n//            binding.root,\r\n//            \"음식점 검색을 위한 위치 정보 접근 권한이 필요합니다\",\r\n//            Snackbar.LENGTH_INDEFINITE\r\n//        )\r\n//        snackBar.setAction(\"승인\") {}\r\n//        snackBar.show()\r\n    }\r\n\r\n//    fun gotoSettings(){\r\n//        val intent = Intent()\r\n//        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n//        val uri = Uri.fromParts(\"package\")\r\n//        intent.data = uri\r\n//        startActivity(intent)\r\n//    }\r\n\r\n    private fun showDefaultLocation(){\r\n        val markerOptions = MarkerOptions()\r\n        markerOptions.position(LatLng(37.56,126.97))\r\n        markerOptions.title(\"위치정보 가져올 수 없음\")\r\n        markerOptions.snippet(\"위치 권한과 GPS 활성 여부를 확인하세요\")\r\n        mMap.addMarker(markerOptions)\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(37.56,126.97),15.0f))\r\n    }\r\n\r\n\r\n    private fun setLocationRequestSettings() {\r\n        locationRequest = LocationRequest.create().apply {\r\n            interval = 10000\r\n            fastestInterval = 5000\r\n            priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        }\r\n\r\n        val builder = LocationSettingsRequest.Builder()\r\n            .addLocationRequest(locationRequest)\r\n        val client: SettingsClient = LocationServices.getSettingsClient(requireActivity())\r\n        val task: Task<LocationSettingsResponse> = client.checkLocationSettings(builder.build())\r\n        //GPS가 켜져있는 경우 아무 것도 안함\r\n        task.addOnFailureListener { exception ->\r\n            // GPS가 꺼져있을 경우\r\n            if (exception is ResolvableApiException) {\r\n                try {\r\n                    exception.startResolutionForResult(\r\n                        requireActivity(),\r\n                        0\r\n                    )\r\n                } catch (sendEx: IntentSender.SendIntentException) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun locationUpdate(){\r\n        locationCallback = object : LocationCallback(){\r\n            override fun onLocationResult(locationResult: LocationResult) {\r\n                locationResult.let{\r\n                    for (location in it.locations){\r\n                        showCurrentLocation(location)\r\n                        getRestaurant(location)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        @SuppressLint(\"MissingPermission\")\r\n        if(isPermitted()) {\r\n            fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, Looper.myLooper())\r\n        }\r\n    }\r\n\r\n    private fun showCurrentLocation(location: Location){\r\n        val currentLocation = LatLng(location.latitude, location.longitude)\r\n        val markerOption = MarkerOptions().position(currentLocation).title(\"현재 위치입니다\")\r\n        val cameraOption= CameraPosition.Builder().target(currentLocation).zoom(15.0f).build()\r\n        val camera = CameraUpdateFactory.newCameraPosition(cameraOption)\r\n        mMap.clear()\r\n        mMap.addMarker(markerOption)\r\n        mMap.moveCamera(camera)\r\n    }\r\n\r\n    private fun getRestaurant(location: Location) {\r\n\r\n        var keyword:String? = null\r\n        setFragmentResultListener(\"Food\"){ key, bundle ->\r\n            keyword=bundle.getString(key)\r\n        }\r\n        Log.d(TAG,\"$keyword 받음\")\r\n        RetrofitObject.getApiService().getRestaurant(getURL(location, keyword))\r\n            .enqueue(object : Callback<RestaurantData> {\r\n                override fun onResponse(\r\n                    call: Call<RestaurantData>,\r\n                    response: Response<RestaurantData>\r\n                ) {\r\n                    showRestaurant(response.body() as RestaurantData)\r\n                }\r\n\r\n                override fun onFailure(call: Call<RestaurantData>, t: Throwable) {\r\n                    Toast.makeText(requireActivity(), \"주변에 식당이 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun showRestaurant(data: RestaurantData) {\r\n        for (res in data.results){\r\n            val position = LatLng(res.geometry.location.lat, res.geometry.location.lng)\r\n            val snippet = res.formatted_address\r\n            val marker = MarkerOptions().position(position).snippet(snippet).title(res.name)\r\n            mMap.addMarker(marker)\r\n        }\r\n        fusedLocationClient.removeLocationUpdates(locationCallback)\r\n    }\r\n\r\n    //동적 URL 생성\r\n    private fun getURL(location: Location, keyword: String?): String {\r\n        val url = \"maps/api/place/textsearch/json?location=\" +\r\n                \"${location.latitude},${location.longitude}\" +\r\n                \"&query=${keyword}&key=${API_KEY}&radius=500&type=restaurant\"\r\n        return url\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding=null\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/kotlinproject/MapFragment.kt b/app/src/main/java/com/example/kotlinproject/MapFragment.kt
---- a/app/src/main/java/com/example/kotlinproject/MapFragment.kt	
-+++ b/app/src/main/java/com/example/kotlinproject/MapFragment.kt	
-@@ -1,21 +1,28 @@
- package com.example.kotlinproject
- 
- 
-+import android.Manifest.permission.ACCESS_FINE_LOCATION
- import android.annotation.SuppressLint
- import android.content.ContentValues.TAG
-+import android.content.Intent
- import android.content.IntentSender
- import android.content.pm.PackageManager
- import android.location.Location
-+import android.net.Uri
- import androidx.fragment.app.Fragment
- 
- import android.os.Bundle
- import android.os.Looper
-+import android.provider.Settings
- 
- import android.util.Log
- import android.view.LayoutInflater
- import android.view.View
- import android.view.ViewGroup
- import android.widget.Toast
-+import androidx.activity.result.contract.ActivityResultContracts
-+import androidx.activity.result.launch
-+import androidx.activity.result.registerForActivityResult
- 
- import androidx.core.app.ActivityCompat
- import androidx.fragment.app.setFragmentResultListener
-@@ -93,7 +100,24 @@
- //            if
- //        }
-         //deprecated code, register..로 추후 변경
--        requestPermissions(permissions,0)
-+//        requestPermissions(permissions,0)
-+        val requestLocation = registerForActivityResult(ActivityResultContracts.RequestPermission(),
-+        ACCESS_FINE_LOCATION){ isGranted ->
-+            if(isGranted) {
-+                startProcess()
-+            }
-+            else if (
-+                ActivityCompat.shouldShowRequestPermissionRationale(
-+                    requireActivity(),
-+                    android.Manifest.permission.ACCESS_FINE_LOCATION
-+                )
-+            ) {
-+                Toast.makeText(requireActivity(), "주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.", Toast.LENGTH_SHORT).show()
-+            }
-+            //요청을 2회 이상 거절하면
-+            else noticeCantWork()
-+        }
-+        requestLocation.launch()
-     }
- 
- 
-@@ -141,22 +165,24 @@
- 
-     private fun noticeCantWork(){
-         Toast.makeText(requireActivity(), "설정에서 위치 사용 권한을 허용해 주세요", Toast.LENGTH_SHORT).show()
--//        val snackBar = Snackbar.make(
--//            binding.root,
--//            "음식점 검색을 위한 위치 정보 접근 권한이 필요합니다",
--//            Snackbar.LENGTH_INDEFINITE
--//        )
--//        snackBar.setAction("승인") {}
--//        snackBar.show()
-+        val snackBar = binding?.root?.let {
-+            Snackbar.make(
-+                it,
-+                "음식점 검색을 위한 위치 정보 접근 권한이 필요합니다",
-+                Snackbar.LENGTH_INDEFINITE
-+            )
-+        }
-+        snackBar?.setAction("승인") {gotoSettings()}
-+        snackBar?.show()
-     }
- 
--//    fun gotoSettings(){
--//        val intent = Intent()
--//        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
--//        val uri = Uri.fromParts("package")
--//        intent.data = uri
--//        startActivity(intent)
--//    }
-+    fun gotoSettings(){
-+        val intent = Intent()
-+        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
-+        val uri = Uri.fromParts("package", activity?.packageName, null)
-+        intent.data = uri
-+        startActivity(intent)
-+    }
- 
-     private fun showDefaultLocation(){
-         val markerOptions = MarkerOptions()
-@@ -235,21 +261,26 @@
-                     response: Response<RestaurantData>
-                 ) {
-                     showRestaurant(response.body() as RestaurantData)
-+                    Log.d(TAG,"api호출 성공")
-                 }
- 
-                 override fun onFailure(call: Call<RestaurantData>, t: Throwable) {
--                    Toast.makeText(requireActivity(), "주변에 식당이 없습니다.", Toast.LENGTH_SHORT).show()
-+                    Toast.makeText(requireActivity(), "api request 실패.", Toast.LENGTH_SHORT).show()
-                 }
-             })
-     }
- 
-     private fun showRestaurant(data: RestaurantData) {
-+        Log.d(TAG,"show 성공")
-         for (res in data.results){
-+            Log.d(TAG,"마커 성공")
-             val position = LatLng(res.geometry.location.lat, res.geometry.location.lng)
-             val snippet = res.formatted_address
-             val marker = MarkerOptions().position(position).snippet(snippet).title(res.name)
-+            Log.d(TAG,"마커 성공")
-             mMap.addMarker(marker)
-         }
-+        Log.d(TAG,"여기는 성공")
-         fusedLocationClient.removeLocationUpdates(locationCallback)
-     }
- 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25__11_26__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25__11_26__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25__11_26__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25__11_26__Changes_1.xml	(revision d06bd96632b95a3dc980e2bb4794bc38e2bce96b)
+++ /dev/null	(revision d06bd96632b95a3dc980e2bb4794bc38e2bce96b)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2022-11-25_오전_11_26_[Changes]1" date="1669343212230" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022-11-25_오전_11_26_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2022-11-25 오전 11:26 [Changes]" />
-</changelist>
\ No newline at end of file
