Index: app/src/main/java/com/example/kotlinproject/ResultFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinproject\r\n\r\nimport android.content.ActivityNotFoundException\r\nimport android.content.ContentValues\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.annotation.DrawableRes\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.example.kotlinproject.databinding.FragmentResultBinding\r\nimport com.example.kotlinproject.db.AppDatabase\r\nimport com.example.kotlinproject.db.RandomFood.Companion.ANYTHINGFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.ASIANFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.CHINESEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.JAPANESEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.KOREANFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.MEATFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.NOODLEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.RICEFOOD\r\nimport com.example.kotlinproject.db.RandomFood.Companion.WESTERNFOOD\r\nimport com.example.kotlinproject.db.entity.Foods\r\nimport com.example.kotlinproject.enum.FoodNames\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.kakao.sdk.common.KakaoSdk\r\nimport com.kakao.sdk.common.util.KakaoCustomTabsClient\r\nimport com.kakao.sdk.share.ShareClient\r\nimport com.kakao.sdk.share.WebSharerClient\r\nimport com.kakao.sdk.template.model.*\r\nimport java.time.LocalDate\r\nimport java.util.*\r\n\r\nclass ResultFragment : Fragment() {\r\n    val database: FirebaseDatabase = FirebaseDatabase.getInstance()\r\n    val databaseReference : DatabaseReference = database.getReference()\r\n    var db: AppDatabase? = null\r\n\r\n    var flag = 0\r\n    var binding : FragmentResultBinding? = null\r\n\r\n    var imageStatus = -1\r\n    lateinit var selectedFood : String\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n//        arguments?.let {\r\n//            anything = it.getStringArrayList(\"anything\")\r\n//        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentResultBinding.inflate(inflater)\r\n        // Inflate the layout for this fragment\r\n        return binding?.root\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        if(flag == 0){\r\n            setImage()\r\n        }else {\r\n            setCurrentImage()\r\n        }\r\n        flag++\r\n\r\n\r\n        binding?.btnMap?.setOnClickListener {\r\n\r\n            // 1.firebase 에 저장\r\n            var random_uuid = UUID.randomUUID()\r\n            val today: LocalDate = LocalDate.now()\r\n            val food = Foods(random_uuid.toString(), selectedFood, today.toString())\r\n            databaseReference.child(\"Foods\").push().setValue(food)\r\n\r\n            val bundle = Bundle()\r\n            bundle.putString(\"Food\", selectedFood)\r\n\r\n            // 2.내부 DB에 저장\r\n            db = AppDatabase.getInstance(requireContext())\r\n            db?.FoodsDao()?.insertAll(food)\r\n            findNavController().navigate(R.id.action_resultFragment_to_mapFragment, bundle)\r\n        }\r\n\r\n        //TODO 도혁님 redo 작업 부탁드려요\r\n        binding?.btnRedo?.setOnClickListener {\r\n            setImage()\r\n        }\r\n\r\n        binding?.btnShare?.setOnClickListener {\r\n\r\n            KakaoLink.init(requireContext())\r\n            val kakaoFeed = KakaoLink.getKakaoTemplate(selectedFood)\r\n            KakaoLink.startKakaoLink(kakaoFeed, requireContext())\r\n\r\n        }\r\n    }\r\n\r\n    private fun setCurrentImage() {\r\n        binding?.imgResult?.setImageResource(imageStatus)\r\n    }\r\n\r\n    private fun setImage() {\r\n        val anything = arguments?.getStringArrayList(ANYTHINGFOOD)\r\n        val korean = arguments?.getStringArrayList(KOREANFOOD)\r\n        val chinese = arguments?.getStringArrayList(CHINESEFOOD)\r\n        val western = arguments?.getStringArrayList(WESTERNFOOD)\r\n        val asian = arguments?.getStringArrayList(ASIANFOOD)\r\n        val japanese = arguments?.getStringArrayList(JAPANESEFOOD)\r\n        val noodle = arguments?.getStringArrayList(NOODLEFOOD)\r\n        val meat = arguments?.getStringArrayList(MEATFOOD)\r\n        val rice = arguments?.getStringArrayList(RICEFOOD)\r\n\r\n        if (anything != null) {\r\n            val index = (1..anything?.size!!).random()\r\n            selectedFood = anything[index - 1]\r\n\r\n            val randomResource = when (index) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_buchim_gae\r\n                3 -> R.drawable.select_cheong_guk_jang\r\n                4 -> R.drawable.select_chicken\r\n                5 -> R.drawable.select_dak_bal\r\n                6 -> R.drawable.select_ddek_bokki\r\n                7 -> R.drawable.select_do_si_rak\r\n                8 -> R.drawable.select_doen_jang_jjigae\r\n                9 -> R.drawable.select_don_gas\r\n                10 -> R.drawable.select_galbitang\r\n\r\n                11 -> R.drawable.select_gim_bap\r\n                12 -> R.drawable.select_gob_chang\r\n                13 -> R.drawable.select_gug_bab\r\n                14 -> R.drawable.select_haejang_gug\r\n                15 -> R.drawable.select_hamburger\r\n                16 -> R.drawable.select_hotdog\r\n                17 -> R.drawable.select_jajjang\r\n                18 -> R.drawable.select_jjambong\r\n                19 -> R.drawable.select_jukkumi\r\n\r\n                20 -> R.drawable.select_kalgugsu\r\n                21 -> R.drawable.select_man_do\r\n                22 -> R.drawable.select_mara_tang\r\n                23 -> R.drawable.select_omurice\r\n                24 -> R.drawable.select_pasta\r\n                25 -> R.drawable.select_pizza\r\n                26 -> R.drawable.select_ramen\r\n                27 -> R.drawable.select_sam_gye_tang\r\n                28 -> R.drawable.select_sam_gyeob_sal\r\n                29 -> R.drawable.select_sandwich\r\n\r\n                30 -> R.drawable.select_sashimi\r\n                31 -> R.drawable.select_soyed_crab\r\n                32 -> R.drawable.select_ssal_guksu\r\n\r\n                33 -> R.drawable.select_sundaebokk_eum\r\n                34 -> R.drawable.select_yang_kko_chi\r\n                35 -> R.drawable.select_yug_hoe\r\n                else -> R.drawable.select_jeyugbokk_eum\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (korean != null) {\r\n            val randomNumber = (1..korean.size).random()\r\n            selectedFood = korean[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_buchim_gae\r\n                3 -> R.drawable.select_cheong_guk_jang\r\n                4 -> R.drawable.select_dak_bal\r\n                5 -> R.drawable.select_ddek_bokki\r\n                6 -> R.drawable.select_do_si_rak\r\n                7 -> R.drawable.select_doen_jang_jjigae\r\n                8 -> R.drawable.select_galbitang\r\n                9 -> R.drawable.select_gim_bap\r\n                10 -> R.drawable.select_gob_chang\r\n\r\n                11 -> R.drawable.select_gug_bab\r\n                12 -> R.drawable.select_haejang_gug\r\n                13 -> R.drawable.select_jeyugbokk_eum\r\n                14 -> R.drawable.select_jukkumi\r\n                15 -> R.drawable.select_kalgugsu\r\n                16 -> R.drawable.select_sam_gye_tang\r\n                17 -> R.drawable.select_galbitang\r\n                18 -> R.drawable.select_sam_gyeob_sal\r\n                else -> R.drawable.select_sundaebokk_eum\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (chinese != null) {\r\n            val randomNumber = (1..chinese.size).random()\r\n            selectedFood = chinese[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_jajjang\r\n                2 -> R.drawable.select_jjambong\r\n                3 -> R.drawable.select_man_do\r\n                4 -> R.drawable.select_mara_tang\r\n                else -> R.drawable.select_yang_kko_chi\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (western != null) {\r\n            val randomNumber = (1..western.size).random()\r\n            selectedFood = western[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_don_gas\r\n                2 -> R.drawable.select_hamburger\r\n                3 -> R.drawable.select_hotdog\r\n                4 -> R.drawable.select_omurice\r\n                5 -> R.drawable.select_pasta\r\n                6 -> R.drawable.select_pizza\r\n                else -> R.drawable.select_sandwich\r\n\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (asian != null) {\r\n            val randomNumber = (1..asian.size).random()\r\n            selectedFood = asian[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_buchim_gae\r\n                3 -> R.drawable.select_chicken\r\n                4 -> R.drawable.select_dak_bal\r\n                5 -> R.drawable.select_do_si_rak\r\n                6 -> R.drawable.select_gim_bap\r\n                7 -> R.drawable.select_gob_chang\r\n                8 -> R.drawable.select_jajjang\r\n                9 -> R.drawable.select_jukkumi\r\n                10 -> R.drawable.select_kalgugsu\r\n\r\n                11 -> R.drawable.select_man_do\r\n                12 -> R.drawable.select_mara_tang\r\n                13 -> R.drawable.select_ramen\r\n                14 -> R.drawable.select_sam_gyeob_sal\r\n                15 -> R.drawable.select_soyed_crab\r\n                16 -> R.drawable.select_ssal_guksu\r\n                17 -> R.drawable.select_jjambong\r\n                else -> R.drawable.select_yang_kko_chi\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (japanese != null) {\r\n            val randomNumber = (1..japanese.size).random()\r\n            selectedFood = japanese[randomNumber - 1]\r\n\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_don_gas\r\n                2 -> R.drawable.select_ramen\r\n                3 -> R.drawable.select_sashimi\r\n                else -> R.drawable.select_soyed_crab\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (noodle != null) {\r\n            val randomNumber = (1..noodle.size).random()\r\n            selectedFood = noodle[randomNumber - 1]\r\n\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_jajjang\r\n                2 -> R.drawable.select_jjambong\r\n                3 -> R.drawable.select_kalgugsu\r\n                4 -> R.drawable.select_mara_tang\r\n                5 -> R.drawable.select_pasta\r\n                6 -> R.drawable.select_ramen\r\n                else -> R.drawable.select_ssal_guksu\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (meat != null) {\r\n            val randomNumber = (1..meat.size).random()\r\n            selectedFood = meat[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_chicken\r\n                2 -> R.drawable.select_dak_bal\r\n                3 -> R.drawable.select_jeyugbokk_eum\r\n                4 -> R.drawable.select_sam_gyeob_sal\r\n                5 -> R.drawable.select_yang_kko_chi\r\n                else -> R.drawable.select_yug_hoe\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n\r\n        if (rice != null) {\r\n            val randomNumber = (1..rice.size).random()\r\n            selectedFood = rice[randomNumber - 1]\r\n\r\n            val randomResource = when (randomNumber) {\r\n                1 -> R.drawable.select_bibim_bap\r\n                2 -> R.drawable.select_cheong_guk_jang\r\n                3 -> R.drawable.select_do_si_rak\r\n                4 -> R.drawable.select_galbitang\r\n                5 -> R.drawable.select_gim_bap\r\n                6 -> R.drawable.select_haejang_gug\r\n                7 -> R.drawable.select_gug_bab\r\n                8 -> R.drawable.select_omurice\r\n                else -> R.drawable.select_sam_gye_tang\r\n            }\r\n            imageStatus = randomResource\r\n            binding?.imgResult?.setImageResource(randomResource)\r\n        }\r\n    }\r\n    private fun makeKakaoTemplate(selectedFood: String): FeedTemplate {\r\n        val defaultFeed = FeedTemplate(\r\n            content = Content(\r\n                title = \"랜덤 음식\",\r\n                description = selectedFood,\r\n                imageUrl = when(selectedFood){\r\n                    FoodNames.BIBIM_BAP -> \"https://user-images.githubusercontent.com/88755733/203039310-716be5d5-8770-419d-890b-f32b4a925bd4.png\"\r\n                    FoodNames.BUCHIM_GAE -> \"https://user-images.githubusercontent.com/88755733/203727863-366fee61-d4b0-4427-993b-ec99d1e9f7bd.png\"\r\n                    FoodNames.CHEONGGUCK_JANG -> \"https://user-images.githubusercontent.com/88755733/203728045-61c24621-260b-4591-b4f7-2f52826254bf.png\"\r\n                    FoodNames.DAK_BAL -> \"https://user-images.githubusercontent.com/88755733/203728269-a553796c-f77c-420c-9474-1dd285a511e5.png\"\r\n                    FoodNames.CHICKEN -> \"https://user-images.githubusercontent.com/88755733/203728345-11a34913-a151-4b9c-bd00-28714782ec48.png\"\r\n                    FoodNames.DDEK_BOKKI -> \"https://user-images.githubusercontent.com/88755733/203728383-6c5041e5-191c-404e-b2e9-bed5fb96a536.png\"\r\n                    FoodNames.DO_SI_RAK -> \"https://user-images.githubusercontent.com/88755733/203728412-657b8422-d137-4863-924e-1516c01ca60f.png\"\r\n                    FoodNames.DOEN_JANG_JJIGAE -> \"https://user-images.githubusercontent.com/88755733/203728459-644bd377-6c5b-4c6e-a824-1951367fd46a.png\"\r\n                    FoodNames.DON_GAS -> \"https://user-images.githubusercontent.com/88755733/203728499-deea3a89-eeef-45e7-9eac-e67a711f4569.png\"\r\n                    FoodNames.GALBITANG -> \"https://user-images.githubusercontent.com/88755733/203728571-d2a0d41f-63de-483e-b6af-8be4f845aa1e.png\"\r\n\r\n                    FoodNames.GIM_BAP -> \"https://user-images.githubusercontent.com/88755733/203728661-cc6d4818-f4c9-4593-99aa-92208413a6fa.png\"\r\n                    FoodNames.GOB_CHANG -> \"https://user-images.githubusercontent.com/88755733/203728713-44a41164-a7a7-4b7b-a8e1-b403f3ee5306.png\"\r\n                    FoodNames.GUG_BAB -> \"https://user-images.githubusercontent.com/88755733/203728754-a781fba8-5879-414f-98dc-b22efdc69a4c.png\"\r\n                    FoodNames.HAEJANG_GUG -> \"https://user-images.githubusercontent.com/88755733/203728781-604e571b-c3d1-45d7-af65-9bf9f11b5b5a.png\"\r\n                    FoodNames.HAMBURGER -> \"https://user-images.githubusercontent.com/88755733/203728960-5fb2303e-9342-4273-9fdd-ef0637bcb40e.png\"\r\n                    FoodNames.HOTDOG -> \"https://user-images.githubusercontent.com/88755733/203729004-6fbb1469-6c56-4769-b801-ccf479f4a473.png\"\r\n                    FoodNames.JAJJANG -> \"https://user-images.githubusercontent.com/88755733/203729037-a301e21f-e14e-4e0e-b82c-bb502ffce849.png\"\r\n                    FoodNames.JEYUGBOKK_EUM -> \"https://user-images.githubusercontent.com/88755733/203729081-130553f3-c338-446d-a84c-85944bb21fce.png\"\r\n                    FoodNames.JJAMBONG -> \"https://user-images.githubusercontent.com/88755733/203729528-4b4e0438-5da9-412b-8bce-5c420497aad5.jpg\"\r\n                    FoodNames.JUKKUMI -> \"https://user-images.githubusercontent.com/88755733/203729594-6fb52305-da2d-416d-86d3-adcb1f2461b8.png\"\r\n                    FoodNames.KALGUGSU -> \"https://user-images.githubusercontent.com/88755733/203731850-7a942863-8eb0-47b4-ae9e-768e51c65332.png\"\r\n                    FoodNames.MAN_DO -> \"https://user-images.githubusercontent.com/88755733/203729690-d120fd04-e47f-4967-9f3e-38506405bdda.png\"\r\n                    FoodNames.MARA_TANG -> \"https://user-images.githubusercontent.com/88755733/203729791-902f6ba2-df6a-4f1b-b459-43ce04859042.png\"\r\n                    FoodNames.OMURICE -> \"https://user-images.githubusercontent.com/88755733/203729870-a31cf1a1-a521-41f4-95ef-d49b401928bf.png\"\r\n                    FoodNames.PASTA -> \"https://user-images.githubusercontent.com/88755733/203729918-66294b95-a9e5-4ae4-8c22-9e2e0997be44.png\"\r\n                    FoodNames.PIZZA -> \"https://user-images.githubusercontent.com/88755733/203730010-114f48aa-ccf0-41e0-ba4f-1402d40b2b30.png\"\r\n                    FoodNames.RAMEN -> \"https://user-images.githubusercontent.com/88755733/203730159-df19e927-d55d-46c5-a3eb-539829491d41.jpg\"\r\n                    FoodNames.SAM_GYE_TANG -> \"https://user-images.githubusercontent.com/88755733/203730202-ee3db4f2-8320-47b4-a7de-316e178b07b1.png\"\r\n                    FoodNames.SAM_GYEOB_SAL -> \"https://user-images.githubusercontent.com/88755733/203730444-a204898b-257b-4a78-bcb0-f7a21ed0bb03.png\"\r\n                    FoodNames.SANDWICH -> \"https://user-images.githubusercontent.com/88755733/203730495-ed0df7f7-fdb7-437e-9b51-99fd1201841a.pn\"\r\n\r\n                    FoodNames.SASHIMI -> \"https://user-images.githubusercontent.com/88755733/203730625-860f7bba-45b8-4a1b-8072-42be48d338d7.png\"\r\n                    FoodNames.SOYED_CRAB -> \"https://user-images.githubusercontent.com/88755733/203730671-5f0c69f8-685f-4905-b390-017fcfa9863e.png\"\r\n                    FoodNames.SSAL_GUKSU -> \"https://user-images.githubusercontent.com/88755733/203730770-a9299231-f5a5-4a37-8bcb-97e8a8b3d7ef.png\"\r\n\r\n                    FoodNames.SUNDAEBOKK -> \"https://user-images.githubusercontent.com/88755733/203730932-26ba5963-71cc-4332-8aba-ce1d7f6f9ba9.png\"\r\n                    FoodNames.YANG_KKO_CHI -> \"https://user-images.githubusercontent.com/88755733/203731212-0b54f0c0-8f5e-478c-8c1c-df9b021ab85a.png\"\r\n\r\n                    else -> \"https://user-images.githubusercontent.com/88755733/203731133-89de0050-9a45-487e-9a76-758cc467fcc0.png\"\r\n                },\r\n                link = Link(\r\n\r\n                )\r\n            )\r\n        )\r\n        return defaultFeed\r\n    }\r\n\r\n    private fun startKakaoLink(defaultFeed: FeedTemplate) {\r\n        if (ShareClient.instance.isKakaoTalkSharingAvailable(requireContext())) {\r\n            // 카카오톡으로 카카오톡 공유 가능\r\n            ShareClient.instance.shareDefault(requireContext(), defaultFeed) { sharingResult, error ->\r\n                if (error != null) {\r\n                    Log.e(ContentValues.TAG, \"카카오톡 공유 실패\", error)\r\n                } else if (sharingResult != null) {\r\n                    Log.d(ContentValues.TAG, \"카카오톡 공유 성공 ${sharingResult.intent}\")\r\n                    startActivity(sharingResult.intent)\r\n\r\n                    // 카카오톡 공유에 성공했지만 아래 경고 메시지가 존재할 경우 일부 컨텐츠가 정상 동작하지 않을 수 있습니다.\r\n                    Log.w(ContentValues.TAG, \"Warning Msg: ${sharingResult.warningMsg}\")\r\n                    Log.w(ContentValues.TAG, \"Argument Msg: ${sharingResult.argumentMsg}\")\r\n                }\r\n            }\r\n        } else {\r\n            // 카카오톡 미설치: 웹 공유 사용 권장\r\n            // 웹 공유 예시 코드\r\n            val sharerUrl = WebSharerClient.instance.makeDefaultUrl(defaultFeed)\r\n\r\n            // CustomTabs으로 웹 브라우저 열기\r\n\r\n            // 1. CustomTabsServiceConnection 지원 브라우저 열기\r\n            // ex) Chrome, 삼성 인터넷, FireFox, 웨일 등\r\n            try {\r\n                KakaoCustomTabsClient.openWithDefault(requireContext(), sharerUrl)\r\n            } catch (e: UnsupportedOperationException) {\r\n                // CustomTabsServiceConnection 지원 브라우저가 없을 때 예외처리\r\n            }\r\n\r\n            // 2. CustomTabsServiceConnection 미지원 브라우저 열기\r\n            // ex) 다음, 네이버 등\r\n            try {\r\n                KakaoCustomTabsClient.open(requireContext(), sharerUrl)\r\n            } catch (e: ActivityNotFoundException) {\r\n                // 디바이스에 설치된 인터넷 브라우저가 없을 때 예외처리\r\n            }\r\n        }\r\n    }\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinproject/ResultFragment.kt b/app/src/main/java/com/example/kotlinproject/ResultFragment.kt
--- a/app/src/main/java/com/example/kotlinproject/ResultFragment.kt	(revision 0d3cee75ec263a9a5a9fed6fef3fa42e6bd01661)
+++ b/app/src/main/java/com/example/kotlinproject/ResultFragment.kt	(date 1669343200626)
@@ -10,6 +10,7 @@
 import android.view.ViewGroup
 import android.widget.ImageView
 import androidx.annotation.DrawableRes
+import androidx.fragment.app.setFragmentResult
 import androidx.navigation.fragment.findNavController
 import com.example.kotlinproject.databinding.FragmentResultBinding
 import com.example.kotlinproject.db.AppDatabase
@@ -83,7 +84,7 @@
 
             val bundle = Bundle()
             bundle.putString("Food", selectedFood)
-
+            setFragmentResult("Food",bundle)
             // 2.내부 DB에 저장
             db = AppDatabase.getInstance(requireContext())
             db?.FoodsDao()?.insertAll(food)
Index: app/src/main/java/com/example/kotlinproject/MapFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinproject\r\n\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.ContentValues.TAG\r\nimport android.content.IntentSender\r\nimport android.content.pm.PackageManager\r\nimport android.location.Location\r\nimport androidx.fragment.app.Fragment\r\n\r\nimport android.os.Bundle\r\nimport android.os.Looper\r\n\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\n\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.fragment.app.setFragmentResultListener\r\nimport com.example.kotlinproject.databinding.FragmentMapBinding\r\nimport com.example.kotlinproject.restaurant.RestaurantData\r\nimport com.google.android.gms.common.api.ResolvableApiException\r\nimport com.google.android.gms.location.*\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.CameraPosition\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass MapFragment : Fragment() {\r\n\r\n    private val callback = OnMapReadyCallback { googleMap ->\r\n        mMap = googleMap\r\n        showDefaultLocation()\r\n        setLocationRequestSettings()\r\n        locationUpdate()\r\n    }\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var locationRequest: LocationRequest\r\n    private lateinit var locationCallback: LocationCallback\r\n    var binding: FragmentMapBinding? = null\r\n    val permissions = Array(2){\r\n        android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n        android.Manifest.permission.ACCESS_FINE_LOCATION\r\n    }\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentMapBinding.inflate(inflater)\r\n        return binding?.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n        if(isPermitted()) startProcess()\r\n        else getPermission()\r\n    }\r\n\r\n    private fun isPermitted() : Boolean {\r\n        for (perm in permissions) {\r\n            if (ActivityCompat.checkSelfPermission(requireActivity(), perm) != PackageManager.PERMISSION_GRANTED)\r\n                return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    private fun startProcess(){\r\n        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(callback)\r\n    }\r\n\r\n    private fun getPermission(){\r\n//        val contract = ActivityResultContracts.RequestPermission()\r\n//        val activityResultLauncher = registerForActivityResult(contract){\r\n//            isGranted ->\r\n//            if\r\n//        }\r\n        //deprecated code, register..로 추후 변경\r\n        requestPermissions(permissions,0)\r\n    }\r\n\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        when (requestCode) {//requestCode가 0일때\r\n            0 -> {\r\n                if (grantResults.isNotEmpty()) {//요청을 허락했을 때 정보를 갖는다\r\n                    var allGranted = true\r\n                    //요청한 권한 허용/거부 상태를 한번에 체크한다\r\n                    for (grant in grantResults) {\r\n                        if (grant != PackageManager.PERMISSION_GRANTED) {\r\n                            allGranted = false\r\n                            break\r\n                        }\r\n                    }\r\n                    //요청한 권한을 모두 허용했다면\r\n                    if (allGranted) {\r\n                        Log.d(TAG,\"start실행\")\r\n                        startProcess()\r\n                    }\r\n                    //요청을 1회 거절하면\r\n                    else if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                            requireActivity(),\r\n                            android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n                        ) &&\r\n                        ActivityCompat.shouldShowRequestPermissionRationale(\r\n                            requireActivity(),\r\n                            android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                        )\r\n                    ) {\r\n                        Toast.makeText(requireActivity(), \"주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.\", Toast.LENGTH_SHORT).show()\r\n                        getPermission()\r\n                    }\r\n                    //요청을 2회 이상 거절하면\r\n                    else noticeCantWork()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun noticeCantWork(){\r\n        Toast.makeText(requireActivity(), \"설정에서 위치 사용 권한을 허용해 주세요\", Toast.LENGTH_SHORT).show()\r\n//        val snackBar = Snackbar.make(\r\n//            binding.root,\r\n//            \"음식점 검색을 위한 위치 정보 접근 권한이 필요합니다\",\r\n//            Snackbar.LENGTH_INDEFINITE\r\n//        )\r\n//        snackBar.setAction(\"승인\") {}\r\n//        snackBar.show()\r\n    }\r\n\r\n//    fun gotoSettings(){\r\n//        val intent = Intent()\r\n//        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS\r\n//        val uri = Uri.fromParts(\"package\")\r\n//        intent.data = uri\r\n//        startActivity(intent)\r\n//    }\r\n\r\n    private fun showDefaultLocation(){\r\n        val markerOptions = MarkerOptions()\r\n        markerOptions.position(LatLng(37.56,126.97))\r\n        markerOptions.title(\"위치정보 가져올 수 없음\")\r\n        markerOptions.snippet(\"위치 권한과 GPS 활성 여부를 확인하세요\")\r\n        mMap.addMarker(markerOptions)\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(37.56,126.97),15.0f))\r\n    }\r\n\r\n\r\n    private fun setLocationRequestSettings() {\r\n        locationRequest = LocationRequest.create().apply {\r\n            interval = 10000\r\n            fastestInterval = 5000\r\n            priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        }\r\n\r\n        val builder = LocationSettingsRequest.Builder()\r\n            .addLocationRequest(locationRequest)\r\n        val client: SettingsClient = LocationServices.getSettingsClient(requireActivity())\r\n        val task: Task<LocationSettingsResponse> = client.checkLocationSettings(builder.build())\r\n        //GPS가 켜져있는 경우 아무 것도 안함\r\n        task.addOnFailureListener { exception ->\r\n            // GPS가 꺼져있을 경우\r\n            if (exception is ResolvableApiException) {\r\n                try {\r\n                    exception.startResolutionForResult(\r\n                        requireActivity(),\r\n                        0\r\n                    )\r\n                } catch (sendEx: IntentSender.SendIntentException) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun locationUpdate(){\r\n        locationCallback = object : LocationCallback(){\r\n            override fun onLocationResult(locationResult: LocationResult) {\r\n                locationResult.let{\r\n                    for (location in it.locations){\r\n                        showCurrentLocation(location)\r\n                        getRestaurant(location)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        @SuppressLint(\"MissingPermission\")\r\n        if(isPermitted()) {\r\n            fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, Looper.myLooper())\r\n        }\r\n    }\r\n\r\n    private fun showCurrentLocation(location: Location){\r\n        val currentLocation = LatLng(location.latitude, location.longitude)\r\n        val markerOption = MarkerOptions().position(currentLocation).title(\"현재 위치입니다\")\r\n        val cameraOption= CameraPosition.Builder().target(currentLocation).zoom(15.0f).build()\r\n        val camera = CameraUpdateFactory.newCameraPosition(cameraOption)\r\n        mMap.clear()\r\n        mMap.addMarker(markerOption)\r\n        mMap.moveCamera(camera)\r\n    }\r\n\r\n    private fun getRestaurant(location: Location) {\r\n\r\n        var keyword:String? = null\r\n        setFragmentResultListener(\"Food\"){ key, bundle ->\r\n            keyword=bundle.getString(key)\r\n        }\r\n        Log.d(TAG,\"$keyword 받음\")\r\n        RetrofitObject.getApiService().getRestaurant(getURL(location, keyword))\r\n            .enqueue(object : Callback<RestaurantData> {\r\n                override fun onResponse(\r\n                    call: Call<RestaurantData>,\r\n                    response: Response<RestaurantData>\r\n                ) {\r\n                    showRestaurant(response.body() as RestaurantData)\r\n                }\r\n\r\n                override fun onFailure(call: Call<RestaurantData>, t: Throwable) {\r\n                    Toast.makeText(requireActivity(), \"주변에 식당이 없습니다.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun showRestaurant(data: RestaurantData) {\r\n        for (res in data.results){\r\n            val position = LatLng(res.geometry.location.lat, res.geometry.location.lng)\r\n            val snippet = res.formatted_address\r\n            val marker = MarkerOptions().position(position).snippet(snippet).title(res.name)\r\n            mMap.addMarker(marker)\r\n        }\r\n        fusedLocationClient.removeLocationUpdates(locationCallback)\r\n    }\r\n\r\n    //동적 URL 생성\r\n    private fun getURL(location: Location, keyword: String?): String {\r\n        val url = \"maps/api/place/textsearch/json?location=\" +\r\n                \"${location.latitude},${location.longitude}\" +\r\n                \"&query=${keyword}&key=${API_KEY}&radius=500&type=restaurant\"\r\n        return url\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding=null\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinproject/MapFragment.kt b/app/src/main/java/com/example/kotlinproject/MapFragment.kt
--- a/app/src/main/java/com/example/kotlinproject/MapFragment.kt	(revision 0d3cee75ec263a9a5a9fed6fef3fa42e6bd01661)
+++ b/app/src/main/java/com/example/kotlinproject/MapFragment.kt	(date 1669344354654)
@@ -1,21 +1,28 @@
 package com.example.kotlinproject
 
 
+import android.Manifest.permission.ACCESS_FINE_LOCATION
 import android.annotation.SuppressLint
 import android.content.ContentValues.TAG
+import android.content.Intent
 import android.content.IntentSender
 import android.content.pm.PackageManager
 import android.location.Location
+import android.net.Uri
 import androidx.fragment.app.Fragment
 
 import android.os.Bundle
 import android.os.Looper
+import android.provider.Settings
 
 import android.util.Log
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.Toast
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.activity.result.launch
+import androidx.activity.result.registerForActivityResult
 
 import androidx.core.app.ActivityCompat
 import androidx.fragment.app.setFragmentResultListener
@@ -93,70 +100,89 @@
 //            if
 //        }
         //deprecated code, register..로 추후 변경
-        requestPermissions(permissions,0)
-    }
-
-
-    override fun onRequestPermissionsResult(
-        requestCode: Int,
-        permissions: Array<out String>,
-        grantResults: IntArray
-    ) {
-        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
-        when (requestCode) {//requestCode가 0일때
-            0 -> {
-                if (grantResults.isNotEmpty()) {//요청을 허락했을 때 정보를 갖는다
-                    var allGranted = true
-                    //요청한 권한 허용/거부 상태를 한번에 체크한다
-                    for (grant in grantResults) {
-                        if (grant != PackageManager.PERMISSION_GRANTED) {
-                            allGranted = false
-                            break
-                        }
-                    }
-                    //요청한 권한을 모두 허용했다면
-                    if (allGranted) {
-                        Log.d(TAG,"start실행")
-                        startProcess()
-                    }
-                    //요청을 1회 거절하면
-                    else if (ActivityCompat.shouldShowRequestPermissionRationale(
-                            requireActivity(),
-                            android.Manifest.permission.ACCESS_COARSE_LOCATION
-                        ) &&
-                        ActivityCompat.shouldShowRequestPermissionRationale(
-                            requireActivity(),
-                            android.Manifest.permission.ACCESS_FINE_LOCATION
-                        )
-                    ) {
-                        Toast.makeText(requireActivity(), "주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.", Toast.LENGTH_SHORT).show()
-                        getPermission()
-                    }
-                    //요청을 2회 이상 거절하면
-                    else noticeCantWork()
-                }
-            }
+//        requestPermissions(permissions,0)
+        val requestLocation = registerForActivityResult(ActivityResultContracts.RequestPermission(),
+        ACCESS_FINE_LOCATION){ isGranted ->
+            if(isGranted) {
+                startProcess()
+            }
+            else if (
+                ActivityCompat.shouldShowRequestPermissionRationale(
+                    requireActivity(),
+                    android.Manifest.permission.ACCESS_FINE_LOCATION
+                )
+            ) {
+                Toast.makeText(requireActivity(), "주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.", Toast.LENGTH_SHORT).show()
+            }
+            //요청을 2회 이상 거절하면
+            else noticeCantWork()
         }
+        requestLocation.launch()
     }
+
+
+//    override fun onRequestPermissionsResult(
+//        requestCode: Int,
+//        permissions: Array<out String>,
+//        grantResults: IntArray
+//    ) {
+//        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
+//        when (requestCode) {//requestCode가 0일때
+//            0 -> {
+//                if (grantResults.isNotEmpty()) {//요청을 허락했을 때 정보를 갖는다
+//                    var allGranted = true
+//                    //요청한 권한 허용/거부 상태를 한번에 체크한다
+//                    for (grant in grantResults) {
+//                        if (grant != PackageManager.PERMISSION_GRANTED) {
+//                            allGranted = false
+//                            break
+//                        }
+//                    }
+//                    //요청한 권한을 모두 허용했다면
+//                    if (allGranted) {
+//                        Log.d(TAG,"start실행")
+//                        startProcess()
+//                    }
+//                    //요청을 1회 거절하면
+//                    else if (ActivityCompat.shouldShowRequestPermissionRationale(
+//                            requireActivity(),
+//                            android.Manifest.permission.ACCESS_COARSE_LOCATION
+//                        ) &&
+//                        ActivityCompat.shouldShowRequestPermissionRationale(
+//                            requireActivity(),
+//                            android.Manifest.permission.ACCESS_FINE_LOCATION
+//                        )
+//                    ) {
+//                        Toast.makeText(requireActivity(), "주변 음식점 검색을 위해 위치 권한이 허용 되어야 합니다.", Toast.LENGTH_SHORT).show()
+//                        getPermission()
+//                    }
+//                    //요청을 2회 이상 거절하면
+//                    else noticeCantWork()
+//                }
+//            }
+//        }
+//    }
 
     private fun noticeCantWork(){
         Toast.makeText(requireActivity(), "설정에서 위치 사용 권한을 허용해 주세요", Toast.LENGTH_SHORT).show()
-//        val snackBar = Snackbar.make(
-//            binding.root,
-//            "음식점 검색을 위한 위치 정보 접근 권한이 필요합니다",
-//            Snackbar.LENGTH_INDEFINITE
-//        )
-//        snackBar.setAction("승인") {}
-//        snackBar.show()
+        val snackBar = binding?.root?.let {
+            Snackbar.make(
+                it,
+                "음식점 검색을 위한 위치 정보 접근 권한이 필요합니다",
+                Snackbar.LENGTH_INDEFINITE
+            )
+        }
+        snackBar?.setAction("승인") {gotoSettings()}
+        snackBar?.show()
     }
 
-//    fun gotoSettings(){
-//        val intent = Intent()
-//        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
-//        val uri = Uri.fromParts("package")
-//        intent.data = uri
-//        startActivity(intent)
-//    }
+    fun gotoSettings(){
+        val intent = Intent()
+        intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
+        val uri = Uri.fromParts("package", activity?.packageName, null)
+        intent.data = uri
+        startActivity(intent)
+    }
 
     private fun showDefaultLocation(){
         val markerOptions = MarkerOptions()
@@ -235,21 +261,26 @@
                     response: Response<RestaurantData>
                 ) {
                     showRestaurant(response.body() as RestaurantData)
+                    Log.d(TAG,"api호출 성공")
                 }
 
                 override fun onFailure(call: Call<RestaurantData>, t: Throwable) {
-                    Toast.makeText(requireActivity(), "주변에 식당이 없습니다.", Toast.LENGTH_SHORT).show()
+                    Toast.makeText(requireActivity(), "api request 실패.", Toast.LENGTH_SHORT).show()
                 }
             })
     }
 
     private fun showRestaurant(data: RestaurantData) {
+        Log.d(TAG,"show 성공")
         for (res in data.results){
+            Log.d(TAG,"마커 성공")
             val position = LatLng(res.geometry.location.lat, res.geometry.location.lng)
             val snippet = res.formatted_address
             val marker = MarkerOptions().position(position).snippet(snippet).title(res.name)
+            Log.d(TAG,"마커 성공")
             mMap.addMarker(marker)
         }
+        Log.d(TAG,"여기는 성공")
         fusedLocationClient.removeLocationUpdates(locationCallback)
     }
 
@@ -257,7 +288,7 @@
     private fun getURL(location: Location, keyword: String?): String {
         val url = "maps/api/place/textsearch/json?location=" +
                 "${location.latitude},${location.longitude}" +
-                "&query=${keyword}&key=${API_KEY}&radius=500&type=restaurant"
+                "&query=${keyword}&key=${API_KEY}&type=restaurant"
         return url
     }
 
